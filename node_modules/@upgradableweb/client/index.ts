interface RequestType extends Omit<RequestInit, 'method'> {
    authorization?: string;
    query?: Record<string, string | number>;
    setLoading?: (state: boolean) => void;
    onResponse?: (data: any) => void;
    onError?: (error: string) => void;
}


export async function POST(url: string, body: any, options: RequestType = {}) {
    return await FETCH(url, body, { method: 'POST', ...options })
}


export async function PUT(url: string, body: any, options: RequestType = {}) {
    return await FETCH(url, body, { method: 'PUT', ...options })
}


export async function DELETE(url: string, body: any, options: RequestType = {}) {
    return await FETCH(url, body, { method: 'DELETE', ...options })
}


export async function PATCH(url: string, body: any, options: RequestType = {}) {
    return await FETCH(url, body, { method: 'PATCH', ...options })
}

export async function GET(url: string, body: any, options: RequestType = {}) {
    return await FETCH(url, body, { method: 'GET', ...options })
}

interface InitTypes extends RequestType {
    method: 'POST' | 'PUT' | 'DELETE' | 'GET' | 'PATCH';
}

type Client = {
    authorization: string;
    base_url: string;
    fetcher: (...param: any[]) => void
}

export const client: Client = {
    authorization: '',
    base_url: '',
    fetcher: fetch
}

fetch

async function FETCH(url: string, body: BodyInit,
    {
        method,
        authorization = client.authorization,
        query,
        setLoading,
        onResponse,
        onError,
        ...inits
    }: InitTypes) {

    try {
        setLoading && setLoading(true)

        if (client.base_url && !url.startsWith('http')) {
            url += url
        }

        if (typeof query === 'object') {
            url += '?' + Params(query)
        }

        const init: any = { method, ...inits }

        if (!(body instanceof FormData)) {
            init.body = JSON.stringify(body)
        } else {
            init.body = body
        }

        if (authorization) {
            init.headers.authorization = authorization
        }

        let res: any = await client.fetcher(url, init)
        let data: any = await res.json()
        data.responseStatus = res.status
        data.responseText = res.statusText
        if (!res.ok) {
            if (!data.message) {
                data.message = res.statusText
            }
            throw data
        }

        if (onResponse) {
            onResponse(data)
        } else {
            return data
        }

    } catch (error) {
        onError && onError(error)
        if (!onResponse) {
            throw error
        }
    } finally {
        setLoading && setLoading(false)
    }
}

export function Params(query: Record<string, string | number>): string {
    const q = Object.entries(query)
        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
        .join('&');
    return q
}